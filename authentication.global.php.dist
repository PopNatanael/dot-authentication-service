<?php

return [
    'dot_authentication' => [
        //required by the auth adapters, it may be optional for your custom adapters
        //specify the identity entity to use and its hydrator

        //this is adapter specific
        //currently we support HTTP basic and digest
        //below is config template for callbackcheck adapter
        'adapter' => [
            'type' => 'CallbackCheck',
            'options' => [
                // zend db adapter service name
                'adapter' => 'database service name',

                'identity_prototype' => '\You\Identity\Class\Implementing\IdentityInterface',
                'identity_hydrator' => 'Hydrator\Class\Implementing\HydratorInterface',

                // your user table name
                'table' => 'user table name',

                // what user fields should use for authentication(db fields)
                'identity_columns' => ['username', 'email'],

                // name of the password db field
                'credential_column' => 'password'

                // your password checking callback, use a closure, a service name of a callable or a callable class name
                // we recommend using a service name or class name instead of closures, to be able to cache the config
                // the below closure is just an example, to show you the callable signature
                // 'callback_check' => function($hash_passwd, $password) {
                //    return $hash_passwd === md5($password);
                // }
            ],
        ],
        //this is a HTTP basic adapter config example
        /*
        'adapter' => [
            'type' => 'Http',
            'options' => [
                'identity_prototype' => '\You\Identity\Class\Implementing\IdentityInterface',
                'identity_hydrator' => 'Hydrator\Class\Implementing\HydratorInterface',

                'config' => [
                    'accept_schemes' => 'basic',
                    'realm' => 'api',
                ],

                'basic_resolver' => [
                    'name' => 'FileResolver',
                    'options' => [
                        'path' => 'path/to/.httpasswd',
                    ],
                ],

                'digest_resolver' => [],
            ],
        ],
        */

        //storage specific options, example below, for session storage
        'storage' => [
            'type' => 'Session',
            'options' => [
                //session namespace
                'namespace' => 'dot_auth',

                //what session member to use
                'member' => 'storage'
            ],
        ],

        'adapter_manager' => [
            //register custom adapters here, like you would do in a normal container
        ],

        'storage_manager' => [
            //register custom storage adapters
        ],

        'resolver_manager' => [
            //define custom http authentication resolvers here, through the resolver plugin manager
        ],
    ]
];
